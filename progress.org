* buttcom progress
* ----------------------- Dated notes ---------------------------
* <2012-04-12 Thu> Created this project
* --------------------- Specifications --------------------------
* The user understands the limitations on remote commands and their arguments.
* The user understands how to call functions with remote commands.
* The user understands how to add another remote command
* The user understands how to use a single port for debug and interface
* Code has a command called "hello" that just returns "hello yourself"
* Code has a command that sets slope for voltage measurements
* Code has a command that sets offset for voltage measurements
* Code has a command that returns a calibrated voltage measurement of the supply voltage
* Commands must not be case sensitive
* ------------------------ TODO list ----------------------------
* DONE Add the ISR logging level [4/4]
** Why do we need this level?
   - Sending log messages from inside the ISR can really change how the system works.  We need a way of tagging messages that originate in the ISR so that we can turn them off.  But we only have two tags right now to work with when calling the logger: subsystem and level.  And because of my design choices, gating messages with their log level is faster than doing it with their system name.
** What should the message's tag be?  [I] is already taken.
   - We can use [R] for the ISR tag.
** DONE The system should boot into log level informational (1)
   - Won't log ISR messages at bootup
** DONE Retake the hello trace to show the new logging level
** DONE Revise the size section to reflect the new code size
** DONE Add a note in the watching the progress section about the new log level
* DONE Add a remote command to set the logging level [2/2]
  - Call the command loglevel
** DONE Command will accept an unsigned 16-bit hex argument
   - 0: ISR
   - 1: Informational
   - 2: Warning
   - 3: Error
** DONE Write the help section for the command
* DONE When a cmd_ function takes no argument, make the argument uint16_t nonval
* DONE Get rid of LED debug code
* DONE Add a section describing how to use the logger module
* DONE Add the rxchar subsystem [3/3]
** DONE Make log messages from the received character ISR have the rxchar subsystem tag
** DONE Regenerate the "watching the progress figure," as the subsystem tags will have changed
** DONE Add an entry in logger.c for the new system
* DONE Add the logreg? command to query the logger config register [3/3]
** DONE Regenerate the command array listing, as the array will have increased
** DONE Add a function in logger.h and logger.c to handle the command
** DONE Follow your "adding a new command" procedure to check the procedure
* DONE Make a script to generate the "watching the progress" figure [2/2]
** DONE Just types hello and gets the reply
** DONE Add this to the makefile
* DONE Add a note about naming callback functions
** I say that I don't worry about putting all remote commands in their own module.  I should further say that I try to put commands in the module they relate to.
* DONE Add a new section -- using remote commands to set calibration values [11/11] :1day:
  - Call the section: Setting calibration values
** DONE Add the vslope command
   - Looks like good calibration command is vslope 126, no offset
** DONE Add the voffset command
** DONE Add an ADC calibration structure to hold slope and offset values
** DONE Add the vcounts? command to get raw adc counts from the ADC
** DONE Add an ADC module to the system
** DONE Revisit the ADC prescaler problem to get more single-shot precision
** DONE Add the volt? command to query the voltage measurement
   - Keep in mind that the calibration factors must be written every time the unit is flashed.  Ideally, I'd figure out how to write the cal factors to eeprom.
** DONE Modify the hardware connection diagram to include the voltage measurement port
** DONE Show trace of measurement of Vcc after sending calibration values (return Vcc in decimal mV)
** DONE Add a number for the ADC used for the Butterfly's voltage reader -- which mux position?
** DONE Add a note that my 3307 answer is a roundoff error -- division by 16 doesn't round off
* DONE Add a paragraph describing problems with power supply turnon ramp rate
* DONE Add an abstract
* DONE Revise size section -- I pulled out the LCD module
* TODO Meet Circuit Cellar requirements [7/7] 			       :1day:
** DONE Article should be 2500 to 3500 words long
** DONE Figures with a lot of text must be in TIF format (no compression) (300dpi) (4x4 inches)
** DONE Expand figure captions to be 2-3 sentences
** DONE Add a biography
** DONE Add a phone number and mailing address
** DONE No more than 10 figures or listings
** DONE Get rid of the numbered list.  Text must be in paragraph format.
* DONE Make a submit target to create the text file and copy figures for submission :1day:
* TODO Create second submission to CC following the recommended guidelines from CJ email
* DONE Add a hello command
  - A simple command to illustrate how the character handling works.
** Arguments: none
** Returns: "Hello yourself!"
* DONE Add a help command
  - A command to print out all the help strings.
** Arguments: none
** Returns: All the command help strings
* DONE Work on watching the progress section
  - This section will describe how the logger functions can be used to turn off debugging output.
  - The system will boot with logging completely enabled.
  - Use the logall command to log all sytems at the info level
  - Use logreg 0 to turn logging off again
** DONE Add a citation for Dean Camera here.  Something like: These log strings can take up a lot of space in RAM, but they can be easily referenced in flash instead using the pgmspace module.  Dean Camera has written a nice explanation of how this works.

** DONE Make a putty screenshot showing processing of the hello command.  This needs to go into the watching the progress section.
* DONE Add a note about the command array
** If you want to let the user pass arguments of other types, just change the definition of the command type to take more arguments.  For example, if you want to handle string arguments, you might add a character pointer argument to the command type definition.
* DONE Modify the command array code listing to have two sections: one for the command_t definition, and the other for the command array.
  DEADLINE: <2012-06-08 Fri>
* TODO All include files need guards
  - look at bc_command.h for an example
* Add references
** TODO Add reference to Elicia White
* DONE Revise the drawing showing connections to the Butterfly [4/4]
** DONE DB9 pins should come out of the page
** DONE Show the AVRISP connector and box
** DONE Add power connections
** DONE Reduce the length of the ribbon cable
* DONE Use tikz to fix up received character flow diagram
* DONE Create the parse buffer figure
** This will show where the string terminators are inserted.  Need to get the pointer names correct.
** DONE Check the parse buffer figure against the xfig flow diagram.
* DONE Add a section describing the toolchain
** The section should say that the code was built with avr-gcc, and it should list the RAM and flash sizes as percentages and absolute values.
* DONE Add a set of instructions for adding remote commands
* DONE Work on the command processing flow diagram [2/2]
** DONE Add a step showing conversion of the command to lower case
** DONE Make the diagram more compact
   - Suggestion: Move the execute command box to be above is the command within limits
* DONE Add a reference to winavr for their makefile
* DONE Better document bc_usart.h
* DONE Better document bc_usart.c
* TODO Better document bc_logger.h
* TODO Better document bc_logger.c
